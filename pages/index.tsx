import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { NodeParsers } from './nodestuff';
import { threngine } from './threngine';

/**
 * WebGL 1 > 2
 * varying > in
 * texture2D > texture??
 * gl_FragColor > out var
 */
const frag = `
precision highp float;

#define PI 3.141592653589793238462643383279

uniform float time;
uniform float speed;
uniform float resolution;
uniform vec3 color;
uniform sampler2D image;
uniform float brightness;

varying vec2 vUv;

vec3 lig = normalize(vec3(0.9,0.35,-0.2));

void main() {
  vec2 uvMax = ( 2.0 * asin( sin( 2.0 * PI * vUv ) ) ) / PI;
  vec2 position = vUv * resolution;
  
	vec3 nor = vec3( 0.0, 1.0, 0.0 );
	float dif = max(dot(nor,lig),0.0);
	
	vec3 pos = vec3( position.x, 0.0, position.y );
	
	float timeScale = time * speed;
	
	// lights
	vec3 brdf = vec3(0.0);
	float cc  = 0.55*texture( image, 1.8*0.02*pos.xz + 0.007*timeScale*vec2( 1.0, 0.0) ).x;
	cc += 0.25*texture( image, 1.8*0.04*pos.xz + 0.011*timeScale*vec2( 0.0, 1.0) ).x;
	cc += 0.10*texture( image, 1.8*0.08*pos.xz + 0.014*timeScale*vec2(-1.0,-1.0) ).x;
	cc = 0.6*(1.0-smoothstep( 0.0, 0.025, abs(cc-0.4))) + 
		0.4*(1.0-smoothstep( 0.0, 0.150, abs(cc-2.4)));

	vec3 col = color * cc;
    
  gl_FragColor = vec4( color * cc * brightness, 1.0 );
}
`;
const vert = `
precision highp float;
precision highp int;

uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat3 normalMatrix;

attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;
attribute vec2 uv2;

in vec2 vUv;
in vec3 vPosition;
in vec3 vNormal;

void main() {
  vUv = uv;
  vPosition = position;
  vNormal = normal;
  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
}
`;

const nodeParsers: NodeParsers = {
  ...threngine.nodes,
};

const Home: NextPage = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <threngine.Component engine={threngine} parsers={nodeParsers} />
    </div>
  );
};

export default Home;
